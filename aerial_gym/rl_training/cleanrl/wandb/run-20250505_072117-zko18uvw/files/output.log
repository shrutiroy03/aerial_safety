using device: cuda:0
[isaacgym:gymutil.py] Unknown args:  ['--task=reach_avoid_task', '--track', '--wandb-project-name=safe-rl', '--wandb-entity=shrutiroy03-princeton-university']
Not connected to PVD
+++ Using GPU PhysX
Physics Engine: PhysX
Physics Device: cuda:0
GPU Pipeline: enabled
*** Can't create empty tensor
WARNING: allocation matrix is not full rank. Rank: 4
[37m[6487 ms][base_task] - INFO : Setting seed: 1456768561 (base_task.py:38)
[37m[6488 ms][reach_avoid_task] - INFO : Building environment for reach-avoid task. (reach_avoid_task.py:44)
[37m[6488 ms][reach_avoid_task] - INFO : Sim Name: base_sim, Env Name: env_with_obstacles, Robot Name: lmf2, Controller Name: lmf2_velocity_control (reach_avoid_task.py:45)
[37m[6488 ms][env_manager] - INFO : Populating environments. (env_manager.py:73)
[37m[6488 ms][env_manager] - INFO : Creating simulation instance. (env_manager.py:87)
[37m[6488 ms][env_manager] - INFO : Instantiating IGE object. (env_manager.py:88)
[37m[6488 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Environment (IGE_env_manager.py:41)
[37m[6488 ms][IsaacGymEnvManager] - INFO : Acquiring gym object (IGE_env_manager.py:73)
[37m[6488 ms][IsaacGymEnvManager] - INFO : Acquired gym object (IGE_env_manager.py:75)
[37m[6489 ms][IsaacGymEnvManager] - INFO : Fixing devices (IGE_env_manager.py:89)
[37m[6489 ms][IsaacGymEnvManager] - INFO : Using GPU pipeline for simulation. (IGE_env_manager.py:102)
[37m[6489 ms][IsaacGymEnvManager] - INFO : Sim Device type: cuda, Sim Device ID: 0 (IGE_env_manager.py:105)
[31m[6489 ms][IsaacGymEnvManager] - CRITICAL : 
[31m Setting graphics device to -1.
[31m This is done because the simulation is run in headless mode and no Isaac Gym cameras are used.
[31m No need to worry. The simulation and warp rendering will work as expected. (IGE_env_manager.py:112)
[37m[6489 ms][IsaacGymEnvManager] - INFO : Graphics Device ID: -1 (IGE_env_manager.py:119)
[37m[6489 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Simulation Object (IGE_env_manager.py:120)
[33m[6489 ms][IsaacGymEnvManager] - WARNING : If you have set the CUDA_VISIBLE_DEVICES environment variable, please ensure that you set it
[33mto a particular one that works for your system to use the viewer or Isaac Gym cameras.
[33mIf you want to run parallel simulations on multiple GPUs with camera sensors,
[33mplease disable Isaac Gym and use warp (by setting use_warp=True), set the viewer to headless. (IGE_env_manager.py:127)
[33m[6489 ms][IsaacGymEnvManager] - WARNING : If you see a segfault in the next lines, it is because of the discrepancy between the CUDA device and the graphics device.
[33mPlease ensure that the CUDA device and the graphics device are the same. (IGE_env_manager.py:132)
[37m[7260 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Simulation Object (IGE_env_manager.py:136)
[37m[7264 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Environment (IGE_env_manager.py:43)
[37m[7335 ms][env_manager] - INFO : IGE object instantiated. (env_manager.py:109)
[37m[7335 ms][env_manager] - INFO : Creating warp environment. (env_manager.py:112)
[37m[7335 ms][env_manager] - INFO : Warp environment created. (env_manager.py:114)
[37m[7336 ms][env_manager] - INFO : Creating robot manager. (env_manager.py:118)
[37m[7336 ms][BaseRobot] - INFO : [DONE] Initializing controller (base_robot.py:26)
[37m[7336 ms][BaseRobot] - INFO : Initializing controller lmf2_velocity_control (base_robot.py:29)
[33m[7336 ms][base_multirotor] - WARNING : Creating 128 multirotors. (base_multirotor.py:32)
[37m[7336 ms][env_manager] - INFO : [DONE] Creating robot manager. (env_manager.py:123)
[37m[7336 ms][env_manager] - INFO : [DONE] Creating simulation instance. (env_manager.py:125)
[37m[7336 ms][asset_loader] - INFO : Loading asset: model.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7337 ms][asset_loader] - INFO : Loading asset: panel.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7340 ms][asset_loader] - INFO : Loading asset: 1_x_1_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7341 ms][asset_loader] - INFO : Loading asset: 0_5_x_0_5_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7342 ms][asset_loader] - INFO : Loading asset: cuboidal_rod.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7343 ms][asset_loader] - INFO : Loading asset: small_cube.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7345 ms][asset_loader] - INFO : Loading asset: left_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7346 ms][asset_loader] - INFO : Loading asset: right_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7347 ms][asset_loader] - INFO : Loading asset: back_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7348 ms][asset_loader] - INFO : Loading asset: front_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7350 ms][asset_loader] - INFO : Loading asset: bottom_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7351 ms][asset_loader] - INFO : Loading asset: top_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[7362 ms][env_manager] - INFO : Populating environment 0 (env_manager.py:179)
[33m[7551 ms][robot_manager] - WARNING : 
[33mRobot mass: 1.2400000467896461,
[33mInertia: tensor([[0.0134, 0.0000, 0.0000],
[33m        [0.0000, 0.0144, 0.0000],
[33m        [0.0000, 0.0000, 0.0138]], device='cuda:0'),
[33mRobot COM: tensor([[0., 0., 0., 1.]], device='cuda:0') (robot_manager.py:427)
[33m[7551 ms][robot_manager] - WARNING : Calculated robot mass and inertia for this robot. This code assumes that your robot is the same across environments. (robot_manager.py:430)
[31m[7551 ms][robot_manager] - CRITICAL : If your robot differs across environments you need to perform this computation for each different robot here. (robot_manager.py:433)
[37m[7804 ms][env_manager] - INFO : [DONE] Populating environments. (env_manager.py:75)
[33m[7818 ms][IsaacGymEnvManager] - WARNING : Headless: True (IGE_env_manager.py:424)
[37m[7818 ms][IsaacGymEnvManager] - INFO : Headless mode. Viewer not created. (IGE_env_manager.py:434)
[33m[7956 ms][asset_manager] - WARNING : Number of obstacles to be kept in the environment: 9 (asset_manager.py:32)
/home/shruti/workspaces/aerial_gym_ws/src/aerial_safety/aerial_gym/control/motor_model.py:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.min_thrust, device=self.device, dtype=torch.float32).expand(
/home/shruti/workspaces/aerial_gym_ws/src/aerial_safety/aerial_gym/control/motor_model.py:48: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.max_thrust, device=self.device, dtype=torch.float32).expand(
[33m[8177 ms][control_allocation] - WARNING : Control allocation does not account for actuator limits. This leads to suboptimal allocation (control_allocation.py:48)
[37m[8178 ms][WarpSensor] - INFO : Camera sensor initialized (warp_sensor.py:50)
creating render graph
Module warp.utils load on device 'cuda:0' took 1.41 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_camera_kernels load on device 'cuda:0' took 7.29 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_stereo_camera_kernels load on device 'cuda:0' took 10.80 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_lidar_kernels load on device 'cuda:0' took 5.29 ms
finishing capture of render graph
num actions:  4
num obs:  81
sac_continuous_action.py:578: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  actions[step] = torch.tensor(action, dtype=torch.float32, device=device)
[31m[10023 ms][reach_avoid_task] - CRITICAL : Crash is happening too soon. (reach_avoid_task.py:197)
[31m[10024 ms][reach_avoid_task] - CRITICAL : Envs crashing too soon: tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
[31m         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
[31m         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
[31m         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
[31m         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
[31m         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
[31m         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
[31m         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
[31m        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
[31m        126, 127], device='cuda:0') (reach_avoid_task.py:198)
[31m[10025 ms][reach_avoid_task] - CRITICAL : Time at crash: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
[31m        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
[31m        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
[31m        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
[31m        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
[31m        1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0', dtype=torch.int32) (reach_avoid_task.py:199)
global_step=128, episodic_return=-100.0
SPS: 798
global_step=4224, episodic_return=-142.30368041992188
global_step=4352, episodic_return=-142.82911682128906
global_step=4480, episodic_return=-137.80918884277344
SPS: 1037
global_step=8320, episodic_return=-130.62429809570312
global_step=8448, episodic_return=-117.34320831298828
global_step=8576, episodic_return=-135.00904846191406
SPS: 1159
global_step=12416, episodic_return=-111.08452606201172
global_step=12544, episodic_return=-131.4737548828125
global_step=12672, episodic_return=-130.8622589111328
SPS: 1221
global_step=16512, episodic_return=-127.97672271728516
global_step=16640, episodic_return=-126.20082092285156
global_step=16768, episodic_return=-136.7883758544922
SPS: 1259
global_step=20608, episodic_return=-119.49606323242188
global_step=20736, episodic_return=-127.71247100830078
global_step=20864, episodic_return=-131.2775115966797
SPS: 1290
global_step=24704, episodic_return=-116.31620788574219
global_step=24832, episodic_return=-144.95046997070312
global_step=24960, episodic_return=-122.08589172363281
SPS: 1310
global_step=28800, episodic_return=-134.55841064453125
global_step=28928, episodic_return=-133.06582641601562
global_step=29056, episodic_return=-123.35475158691406
SPS: 1330
global_step=32896, episodic_return=-128.5454559326172
global_step=33024, episodic_return=-128.65643310546875
global_step=33152, episodic_return=-129.9354705810547
[33m[35455 ms][reach_avoid_task] - WARNING : Curriculum Level: 15, Curriculum progress fraction: 0.0 (reach_avoid_task.py:264)
[33m[35455 ms][reach_avoid_task] - WARNING : 
[33mSuccess Rate: 0.0
[33mCrash Rate: 1.0
[33mTimeout Rate: 0.0 (reach_avoid_task.py:267)
[33m[35455 ms][reach_avoid_task] - WARNING : 
[33mSuccesses: 0
[33mCrashes : 2054
[33mTimeouts: 0 (reach_avoid_task.py:270)
SPS: 1342
global_step=36992, episodic_return=-132.5147705078125
global_step=37120, episodic_return=-117.16860961914062
global_step=37248, episodic_return=-136.4598388671875
SPS: 1353
global_step=41088, episodic_return=-115.91171264648438
global_step=41216, episodic_return=-132.56466674804688
global_step=41344, episodic_return=-124.20694732666016
SPS: 1364
global_step=45184, episodic_return=-138.5314178466797
global_step=45312, episodic_return=-126.41924285888672
global_step=45440, episodic_return=-111.79888916015625
SPS: 1375
global_step=49280, episodic_return=-127.18232727050781
global_step=49408, episodic_return=-132.83001708984375
global_step=49536, episodic_return=-118.06233978271484
SPS: 1383
global_step=53376, episodic_return=-137.36160278320312
global_step=53504, episodic_return=-133.25112915039062
global_step=53632, episodic_return=-117.67152404785156
[31m[48849 ms][reach_avoid_task] - CRITICAL : Crash is happening too soon. (reach_avoid_task.py:197)
[31m[48849 ms][reach_avoid_task] - CRITICAL : Envs crashing too soon: tensor([59], device='cuda:0') (reach_avoid_task.py:198)
[31m[48849 ms][reach_avoid_task] - CRITICAL : Time at crash: tensor([4], device='cuda:0', dtype=torch.int32) (reach_avoid_task.py:199)
SPS: 1388
global_step=57472, episodic_return=-123.91228485107422
global_step=57600, episodic_return=-113.5954818725586
global_step=57728, episodic_return=-126.4056396484375
SPS: 1392
global_step=61568, episodic_return=-128.10610961914062
global_step=61696, episodic_return=-139.79917907714844
global_step=61824, episodic_return=-140.75064086914062
[31m[56037 ms][reach_avoid_task] - CRITICAL : Crash is happening too soon. (reach_avoid_task.py:197)
[31m[56038 ms][reach_avoid_task] - CRITICAL : Envs crashing too soon: tensor([124], device='cuda:0') (reach_avoid_task.py:198)
[31m[56038 ms][reach_avoid_task] - CRITICAL : Time at crash: tensor([4], device='cuda:0', dtype=torch.int32) (reach_avoid_task.py:199)
SPS: 1397
global_step=65664, episodic_return=-156.7215118408203
global_step=65792, episodic_return=-141.73187255859375
global_step=65920, episodic_return=-112.33892059326172
[33m[59984 ms][reach_avoid_task] - WARNING : Curriculum Level: 15, Curriculum progress fraction: 0.0 (reach_avoid_task.py:264)
[33m[59984 ms][reach_avoid_task] - WARNING : 
[33mSuccess Rate: 0.0
[33mCrash Rate: 1.0
[33mTimeout Rate: 0.0 (reach_avoid_task.py:267)
[33m[59984 ms][reach_avoid_task] - WARNING : 
[33mSuccesses: 0
[33mCrashes : 2051
[33mTimeouts: 0 (reach_avoid_task.py:270)
SPS: 1400
global_step=69760, episodic_return=-120.66441345214844
global_step=69888, episodic_return=-136.58721923828125
global_step=70016, episodic_return=-119.35029602050781
SPS: 1403
global_step=73856, episodic_return=-128.54779052734375
global_step=73984, episodic_return=-153.53770446777344
global_step=74112, episodic_return=-160.9265594482422
SPS: 1404
global_step=77952, episodic_return=-137.02584838867188
global_step=78080, episodic_return=-147.45367431640625
global_step=78208, episodic_return=-131.47943115234375
SPS: 1405
global_step=82048, episodic_return=-138.31558227539062
global_step=82176, episodic_return=-134.21864318847656
global_step=82304, episodic_return=-128.39186096191406
SPS: 1408
global_step=86144, episodic_return=-120.14472198486328
global_step=86272, episodic_return=-118.29293823242188
global_step=86400, episodic_return=-127.41350555419922
SPS: 1410
global_step=90240, episodic_return=-141.24668884277344
global_step=90368, episodic_return=-115.97563171386719
global_step=90496, episodic_return=-128.14437866210938
SPS: 1410
global_step=94336, episodic_return=-114.87301635742188
global_step=94464, episodic_return=-115.4942626953125
global_step=94592, episodic_return=-108.45326232910156
SPS: 1411
global_step=98432, episodic_return=-149.70547485351562
global_step=98560, episodic_return=-132.20852661132812
global_step=98688, episodic_return=-130.51266479492188
SPS: 1412
global_step=102528, episodic_return=-122.48916625976562
global_step=102656, episodic_return=-120.22722625732422
global_step=102784, episodic_return=-130.45748901367188
Traceback (most recent call last):
  File "sac_continuous_action.py", line 574, in <module>
    action, logprob, _, q1, q2 = agent.get_action_and_value(next_obs)
  File "sac_continuous_action.py", line 442, in get_action_and_value
    probs = Normal(action_mean, action_std)
  File "/home/shruti/miniconda3/envs/safe-rl/lib/python3.8/site-packages/torch/distributions/normal.py", line 57, in __init__
    super().__init__(batch_shape, validate_args=validate_args)
  File "/home/shruti/miniconda3/envs/safe-rl/lib/python3.8/site-packages/torch/distributions/distribution.py", line 69, in __init__
    if not valid.all():
KeyboardInterrupt
Traceback (most recent call last):
  File "sac_continuous_action.py", line 574, in <module>
    action, logprob, _, q1, q2 = agent.get_action_and_value(next_obs)
  File "sac_continuous_action.py", line 442, in get_action_and_value
    probs = Normal(action_mean, action_std)
  File "/home/shruti/miniconda3/envs/safe-rl/lib/python3.8/site-packages/torch/distributions/normal.py", line 57, in __init__
    super().__init__(batch_shape, validate_args=validate_args)
  File "/home/shruti/miniconda3/envs/safe-rl/lib/python3.8/site-packages/torch/distributions/distribution.py", line 69, in __init__
    if not valid.all():
KeyboardInterrupt